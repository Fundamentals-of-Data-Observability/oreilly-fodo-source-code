package asm.io.airbyte.workers.general;
import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;
public class DefaultReplicationWorkerDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter classWriter = new ClassWriter(0);
FieldVisitor fieldVisitor;
RecordComponentVisitor recordComponentVisitor;
MethodVisitor methodVisitor;
AnnotationVisitor annotationVisitor0;

classWriter.visit(V17, ACC_PUBLIC | ACC_SUPER, "io/airbyte/workers/general/DefaultReplicationWorker", null, "java/lang/Object", new String[] { "io/airbyte/workers/general/ReplicationWorker" });

classWriter.visitSource("DefaultReplicationWorker.java", null);

classWriter.visitNestMember("io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");

classWriter.visitNestMember("io/airbyte/workers/general/DefaultReplicationWorker$SourceException");

classWriter.visitInnerClass("io/airbyte/config/StandardSyncSummary$ReplicationStatus", "io/airbyte/config/StandardSyncSummary", "ReplicationStatus", ACC_PUBLIC | ACC_FINAL | ACC_STATIC | ACC_ENUM);

classWriter.visitInnerClass("io/airbyte/workers/general/DefaultReplicationWorker$DestinationException", "io/airbyte/workers/general/DefaultReplicationWorker", "DestinationException", ACC_PRIVATE | ACC_STATIC);

classWriter.visitInnerClass("io/airbyte/workers/general/DefaultReplicationWorker$SourceException", "io/airbyte/workers/general/DefaultReplicationWorker", "SourceException", ACC_PRIVATE | ACC_STATIC);

classWriter.visitInnerClass("java/lang/invoke/MethodHandles$Lookup", "java/lang/invoke/MethodHandles", "Lookup", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "LOGGER", "Lorg/slf4j/Logger;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "jobId", "Ljava/lang/String;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "attempt", "I", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "source", "Lio/airbyte/workers/internal/AirbyteSource;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "mapper", "Lio/airbyte/workers/internal/AirbyteMapper;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "executors", "Ljava/util/concurrent/ExecutorService;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "hasFailed", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;", null, null);
fieldVisitor.visitEnd();
}
{
fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;", null, null);
fieldVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/String;ILio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/internal/MessageTracker;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/WorkerMetricReporter;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(90, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(91, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(92, label2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ILOAD, 2);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(93, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "source", "Lio/airbyte/workers/internal/AirbyteSource;");
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(94, label4);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "mapper", "Lio/airbyte/workers/internal/AirbyteMapper;");
Label label5 = new Label();
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(95, label5);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(96, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label7 = new Label();
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(97, label7);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/Executors", "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;", false);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
Label label8 = new Label();
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(98, label8);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;");
Label label9 = new Label();
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(99, label9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;");
Label label10 = new Label();
methodVisitor.visitLabel(label10);
methodVisitor.visitLineNumber(101, label10);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "java/util/concurrent/atomic/AtomicBoolean");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/atomic/AtomicBoolean", "<init>", "(Z)V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;");
Label label11 = new Label();
methodVisitor.visitLabel(label11);
methodVisitor.visitLineNumber(102, label11);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitTypeInsn(NEW, "java/util/concurrent/atomic/AtomicBoolean");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/atomic/AtomicBoolean", "<init>", "(Z)V", false);
methodVisitor.visitFieldInsn(PUTFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "hasFailed", "Ljava/util/concurrent/atomic/AtomicBoolean;");
Label label12 = new Label();
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(103, label12);
methodVisitor.visitInsn(RETURN);
Label label13 = new Label();
methodVisitor.visitLabel(label13);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label0, label13, 0);
methodVisitor.visitLocalVariable("jobId", "Ljava/lang/String;", null, label0, label13, 1);
methodVisitor.visitLocalVariable("attempt", "I", null, label0, label13, 2);
methodVisitor.visitLocalVariable("source", "Lio/airbyte/workers/internal/AirbyteSource;", null, label0, label13, 3);
methodVisitor.visitLocalVariable("mapper", "Lio/airbyte/workers/internal/AirbyteMapper;", null, label0, label13, 4);
methodVisitor.visitLocalVariable("destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, label0, label13, 5);
methodVisitor.visitLocalVariable("messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, label0, label13, 6);
methodVisitor.visitLocalVariable("recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;", null, label0, label13, 7);
methodVisitor.visitLocalVariable("metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;", null, label0, label13, 8);
methodVisitor.visitMaxs(4, 9);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_FINAL, "run", "(Lio/airbyte/config/StandardSyncInput;Ljava/nio/file/Path;)Lio/airbyte/config/ReplicationOutput;", null, new String[] { "io/airbyte/workers/exception/WorkerException" });
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Throwable");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Throwable");
Label label6 = new Label();
Label label7 = new Label();
Label label8 = new Label();
methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/Throwable");
Label label9 = new Label();
Label label10 = new Label();
Label label11 = new Label();
methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/lang/Throwable");
Label label12 = new Label();
Label label13 = new Label();
Label label14 = new Label();
methodVisitor.visitTryCatchBlock(label12, label13, label14, "java/lang/Exception");
Label label15 = new Label();
methodVisitor.visitTryCatchBlock(label12, label13, label15, null);
Label label16 = new Label();
methodVisitor.visitTryCatchBlock(label14, label16, label15, null);
Label label17 = new Label();
methodVisitor.visitTryCatchBlock(label15, label17, label15, null);
Label label18 = new Label();
Label label19 = new Label();
Label label20 = new Label();
methodVisitor.visitTryCatchBlock(label18, label19, label20, "java/lang/Exception");
Label label21 = new Label();
methodVisitor.visitLabel(label21);
methodVisitor.visitLineNumber(119, label21);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("start sync worker. job id: {} attempt id: {}");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label label22 = new Label();
methodVisitor.visitLabel(label22);
methodVisitor.visitLineNumber(123, label22);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/WorkerUtils", "syncToWorkerDestinationConfig", "(Lio/airbyte/config/StandardSyncInput;)Lio/airbyte/config/WorkerDestinationConfig;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label23 = new Label();
methodVisitor.visitLabel(label23);
methodVisitor.visitLineNumber(124, label23);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "mapper", "Lio/airbyte/workers/internal/AirbyteMapper;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/WorkerDestinationConfig", "getCatalog", "()Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteMapper", "mapCatalog", "(Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;)Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/WorkerDestinationConfig", "setCatalog", "(Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;)V", false);
Label label24 = new Label();
methodVisitor.visitLabel(label24);
methodVisitor.visitLineNumber(126, label24);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
methodVisitor.visitVarInsn(LSTORE, 4);
Label label25 = new Label();
methodVisitor.visitLabel(label25);
methodVisitor.visitLineNumber(127, label25);
methodVisitor.visitTypeInsn(NEW, "java/util/concurrent/atomic/AtomicReference");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/atomic/AtomicReference", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 6);
Label label26 = new Label();
methodVisitor.visitLabel(label26);
methodVisitor.visitLineNumber(128, label26);
methodVisitor.visitTypeInsn(NEW, "java/util/concurrent/atomic/AtomicReference");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/atomic/AtomicReference", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 7);
methodVisitor.visitLabel(label18);
methodVisitor.visitLineNumber(131, label18);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("configured sync modes: {}");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StandardSyncInput", "getCatalog", "()Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/ConfiguredAirbyteCatalog", "getStreams", "()Ljava/util/List;", false);
Label label27 = new Label();
methodVisitor.visitLabel(label27);
methodVisitor.visitLineNumber(132, label27);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "stream", "()Ljava/util/stream/Stream;", true);
methodVisitor.visitInvokeDynamicInsn("apply", "()Ljava/util/function/Function;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;)Ljava/lang/Object;"), new Handle(Opcodes.H_INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$run$0", "(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;", false), Type.getType("(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;")});
methodVisitor.visitInvokeDynamicInsn("apply", "()Ljava/util/function/Function;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;)Ljava/lang/Object;"), new Handle(Opcodes.H_INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$run$1", "(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;", false), Type.getType("(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;")});
Label label28 = new Label();
methodVisitor.visitLabel(label28);
methodVisitor.visitLineNumber(133, label28);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/stream/Collectors", "toMap", "(Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/stream/Collector;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/stream/Stream", "collect", "(Ljava/util/stream/Collector;)Ljava/lang/Object;", true);
Label label29 = new Label();
methodVisitor.visitLabel(label29);
methodVisitor.visitLineNumber(131, label29);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
Label label30 = new Label();
methodVisitor.visitLabel(label30);
methodVisitor.visitLineNumber(135, label30);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/WorkerUtils", "syncToWorkerSourceConfig", "(Lio/airbyte/config/StandardSyncInput;)Lio/airbyte/config/WorkerSourceConfig;", false);
methodVisitor.visitVarInsn(ASTORE, 8);
Label label31 = new Label();
methodVisitor.visitLabel(label31);
methodVisitor.visitLineNumber(137, label31);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/slf4j/MDC", "getCopyOfContextMap", "()Ljava/util/Map;", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(141, label12);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitLabel(label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "source", "Lio/airbyte/workers/internal/AirbyteSource;");
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(142, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "start", "(Lio/airbyte/config/WorkerDestinationConfig;Ljava/nio/file/Path;)V", true);
Label label32 = new Label();
methodVisitor.visitLabel(label32);
methodVisitor.visitLineNumber(143, label32);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "source", "Lio/airbyte/workers/internal/AirbyteSource;");
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "start", "(Lio/airbyte/config/WorkerSourceConfig;Ljava/nio/file/Path;)V", true);
Label label33 = new Label();
methodVisitor.visitLabel(label33);
methodVisitor.visitLineNumber(147, label33);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitVarInsn(ALOAD, 9);
Label label34 = new Label();
methodVisitor.visitLabel(label34);
methodVisitor.visitLineNumber(148, label34);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "getDestinationOutputRunnable", "(Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map;)Ljava/lang/Runnable;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
Label label35 = new Label();
methodVisitor.visitLabel(label35);
methodVisitor.visitLineNumber(147, label35);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/CompletableFuture", "runAsync", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInvokeDynamicInsn("accept", "(Lio/airbyte/workers/general/DefaultReplicationWorker;Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/function/BiConsumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKEVIRTUAL, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$run$2", "(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Void;Ljava/lang/Throwable;)V", false), Type.getType("(Ljava/lang/Void;Ljava/lang/Throwable;)V")});
Label label36 = new Label();
methodVisitor.visitLabel(label36);
methodVisitor.visitLineNumber(149, label36);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/CompletableFuture", "whenComplete", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitVarInsn(ASTORE, 12);
Label label37 = new Label();
methodVisitor.visitLabel(label37);
methodVisitor.visitLineNumber(159, label37);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "source", "Lio/airbyte/workers/internal/AirbyteSource;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "mapper", "Lio/airbyte/workers/internal/AirbyteMapper;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;");
Label label38 = new Label();
methodVisitor.visitLabel(label38);
methodVisitor.visitLineNumber(160, label38);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "getReplicationRunnable", "(Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/WorkerMetricReporter;)Ljava/lang/Runnable;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
Label label39 = new Label();
methodVisitor.visitLabel(label39);
methodVisitor.visitLineNumber(159, label39);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/CompletableFuture", "runAsync", "(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitInvokeDynamicInsn("accept", "(Lio/airbyte/workers/general/DefaultReplicationWorker;Ljava/util/concurrent/atomic/AtomicReference;)Ljava/util/function/BiConsumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKEVIRTUAL, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$run$3", "(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Void;Ljava/lang/Throwable;)V", false), Type.getType("(Ljava/lang/Void;Ljava/lang/Throwable;)V")});
Label label40 = new Label();
methodVisitor.visitLabel(label40);
methodVisitor.visitLineNumber(161, label40);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/CompletableFuture", "whenComplete", "(Ljava/util/function/BiConsumer;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
Label label41 = new Label();
methodVisitor.visitLabel(label41);
methodVisitor.visitLineNumber(173, label41);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Waiting for source and destination threads to complete.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
Label label42 = new Label();
methodVisitor.visitLabel(label42);
methodVisitor.visitLineNumber(177, label42);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/util/concurrent/CompletableFuture");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/CompletableFuture", "anyOf", "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/CompletableFuture", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
Label label43 = new Label();
methodVisitor.visitLabel(label43);
methodVisitor.visitLineNumber(178, label43);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("One of source or destination thread complete. Waiting on the other.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
Label label44 = new Label();
methodVisitor.visitLabel(label44);
methodVisitor.visitLineNumber(179, label44);
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/util/concurrent/CompletableFuture");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/CompletableFuture", "allOf", "([Ljava/util/concurrent/CompletableFuture;)Ljava/util/concurrent/CompletableFuture;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/CompletableFuture", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitInsn(POP);
Label label45 = new Label();
methodVisitor.visitLabel(label45);
methodVisitor.visitLineNumber(180, label45);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Source and destination threads complete.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(182, label1);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitJumpInsn(IFNULL, label7);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "close", "()V", true);
methodVisitor.visitJumpInsn(GOTO, label7);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(141, label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 11, new Object[] {"io/airbyte/workers/general/DefaultReplicationWorker", "io/airbyte/config/StandardSyncInput", "java/nio/file/Path", "io/airbyte/config/WorkerDestinationConfig", Opcodes.LONG, "java/util/concurrent/atomic/AtomicReference", "java/util/concurrent/atomic/AtomicReference", "io/airbyte/config/WorkerSourceConfig", "java/util/Map", "io/airbyte/workers/internal/AirbyteDestination", "io/airbyte/workers/internal/AirbyteSource"}, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 11);
Label label46 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label46);
methodVisitor.visitLabel(label3);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "close", "()V", true);
methodVisitor.visitLabel(label4);
methodVisitor.visitJumpInsn(GOTO, label46);
methodVisitor.visitLabel(label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 12, new Object[] {"io/airbyte/workers/general/DefaultReplicationWorker", "io/airbyte/config/StandardSyncInput", "java/nio/file/Path", "io/airbyte/config/WorkerDestinationConfig", Opcodes.LONG, "java/util/concurrent/atomic/AtomicReference", "java/util/concurrent/atomic/AtomicReference", "io/airbyte/config/WorkerSourceConfig", "java/util/Map", "io/airbyte/workers/internal/AirbyteDestination", "io/airbyte/workers/internal/AirbyteSource", "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 13);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitLabel(label46);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(182, label7);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitJumpInsn(IFNULL, label13);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "close", "()V", true);
methodVisitor.visitJumpInsn(GOTO, label13);
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(141, label8);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 11);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label47 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label47);
methodVisitor.visitLabel(label9);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "close", "()V", true);
methodVisitor.visitLabel(label10);
methodVisitor.visitJumpInsn(GOTO, label47);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_FULL, 11, new Object[] {"io/airbyte/workers/general/DefaultReplicationWorker", "io/airbyte/config/StandardSyncInput", "java/nio/file/Path", "io/airbyte/config/WorkerDestinationConfig", Opcodes.LONG, "java/util/concurrent/atomic/AtomicReference", "java/util/concurrent/atomic/AtomicReference", "io/airbyte/config/WorkerSourceConfig", "java/util/Map", "io/airbyte/workers/internal/AirbyteDestination", "java/lang/Throwable"}, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 12);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "addSuppressed", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitLabel(label47);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(186, label13);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/ExecutorService", "shutdownNow", "()Ljava/util/List;", true);
methodVisitor.visitInsn(POP);
Label label48 = new Label();
methodVisitor.visitLabel(label48);
methodVisitor.visitLineNumber(187, label48);
Label label49 = new Label();
methodVisitor.visitJumpInsn(GOTO, label49);
methodVisitor.visitLabel(label14);
methodVisitor.visitLineNumber(182, label14);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 10);
Label label50 = new Label();
methodVisitor.visitLabel(label50);
methodVisitor.visitLineNumber(183, label50);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "hasFailed", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "set", "(Z)V", false);
Label label51 = new Label();
methodVisitor.visitLabel(label51);
methodVisitor.visitLineNumber(184, label51);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Sync worker failed.");
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "error", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
methodVisitor.visitLabel(label16);
methodVisitor.visitLineNumber(186, label16);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/ExecutorService", "shutdownNow", "()Ljava/util/List;", true);
methodVisitor.visitInsn(POP);
Label label52 = new Label();
methodVisitor.visitLabel(label52);
methodVisitor.visitLineNumber(187, label52);
methodVisitor.visitJumpInsn(GOTO, label49);
methodVisitor.visitLabel(label15);
methodVisitor.visitLineNumber(186, label15);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
methodVisitor.visitVarInsn(ASTORE, 14);
methodVisitor.visitLabel(label17);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/ExecutorService", "shutdownNow", "()Ljava/util/List;", true);
methodVisitor.visitInsn(POP);
Label label53 = new Label();
methodVisitor.visitLabel(label53);
methodVisitor.visitLineNumber(187, label53);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label49);
methodVisitor.visitLineNumber(191, label49);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
Label label54 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label54);
Label label55 = new Label();
methodVisitor.visitLabel(label55);
methodVisitor.visitLineNumber(192, label55);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "CANCELLED", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;");
methodVisitor.visitVarInsn(ASTORE, 10);
Label label56 = new Label();
methodVisitor.visitLabel(label56);
Label label57 = new Label();
methodVisitor.visitJumpInsn(GOTO, label57);
methodVisitor.visitLabel(label54);
methodVisitor.visitLineNumber(195, label54);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "hasFailed", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
Label label58 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label58);
Label label59 = new Label();
methodVisitor.visitLabel(label59);
methodVisitor.visitLineNumber(196, label59);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "FAILED", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;");
methodVisitor.visitVarInsn(ASTORE, 10);
Label label60 = new Label();
methodVisitor.visitLabel(label60);
methodVisitor.visitJumpInsn(GOTO, label57);
methodVisitor.visitLabel(label58);
methodVisitor.visitLineNumber(198, label58);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "COMPLETED", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;");
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitLabel(label57);
methodVisitor.visitLineNumber(201, label57);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"io/airbyte/config/StandardSyncSummary$ReplicationStatus"}, 0, null);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/config/SyncStats");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/config/SyncStats", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label61 = new Label();
methodVisitor.visitLabel(label61);
methodVisitor.visitLineNumber(202, label61);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalRecordsEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withRecordsEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label62 = new Label();
methodVisitor.visitLabel(label62);
methodVisitor.visitLineNumber(203, label62);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalBytesEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withBytesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label63 = new Label();
methodVisitor.visitLabel(label63);
methodVisitor.visitLineNumber(204, label63);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalSourceStateMessagesEmitted", "()Ljava/lang/Long;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withSourceStateMessagesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label64 = new Label();
methodVisitor.visitLabel(label64);
methodVisitor.visitLineNumber(205, label64);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalDestinationStateMessagesEmitted", "()Ljava/lang/Long;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withDestinationStateMessagesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label65 = new Label();
methodVisitor.visitLabel(label65);
methodVisitor.visitLineNumber(206, label65);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getMaxSecondsToReceiveSourceStateMessage", "()Ljava/lang/Long;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withMaxSecondsBeforeSourceStateMessageEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label66 = new Label();
methodVisitor.visitLabel(label66);
methodVisitor.visitLineNumber(207, label66);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getMeanSecondsToReceiveSourceStateMessage", "()Ljava/lang/Long;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withMeanSecondsBeforeSourceStateMessageEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label67 = new Label();
methodVisitor.visitLabel(label67);
methodVisitor.visitLineNumber(208, label67);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getMaxSecondsBetweenStateMessageEmittedAndCommitted", "()Ljava/util/Optional;", true);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withMaxSecondsBetweenStateMessageEmittedandCommitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label68 = new Label();
methodVisitor.visitLabel(label68);
methodVisitor.visitLineNumber(209, label68);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getMeanSecondsBetweenStateMessageEmittedAndCommitted", "()Ljava/util/Optional;", true);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "orElse", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withMeanSecondsBetweenStateMessageEmittedandCommitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ASTORE, 11);
Label label69 = new Label();
methodVisitor.visitLabel(label69);
methodVisitor.visitLineNumber(211, label69);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "COMPLETED", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;");
Label label70 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label70);
Label label71 = new Label();
methodVisitor.visitLabel(label71);
methodVisitor.visitLineNumber(212, label71);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "getRecordsEmitted", "()Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
Label label72 = new Label();
methodVisitor.visitJumpInsn(GOTO, label72);
methodVisitor.visitLabel(label70);
methodVisitor.visitLineNumber(213, label70);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"io/airbyte/config/SyncStats"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalRecordsCommitted", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label73 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label73);
Label label74 = new Label();
methodVisitor.visitLabel(label74);
methodVisitor.visitLineNumber(214, label74);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalRecordsCommitted", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
methodVisitor.visitJumpInsn(GOTO, label72);
methodVisitor.visitLabel(label73);
methodVisitor.visitLineNumber(216, label73);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Could not reliably determine committed record counts, committed record stats will be set to null");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "warn", "(Ljava/lang/String;)V", true);
Label label75 = new Label();
methodVisitor.visitLabel(label75);
methodVisitor.visitLineNumber(217, label75);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
methodVisitor.visitLabel(label72);
methodVisitor.visitLineNumber(221, label72);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToEmittedRecords", "()Ljava/util/Map;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "keySet", "()Ljava/util/Set;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "stream", "()Ljava/util/stream/Stream;", true);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitInvokeDynamicInsn("apply", "(Lio/airbyte/workers/general/DefaultReplicationWorker;Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;)Ljava/util/function/Function;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;)Ljava/lang/Object;"), new Handle(Opcodes.H_INVOKEVIRTUAL, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$run$4", "(Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;Ljava/lang/String;)Lio/airbyte/config/StreamSyncStats;", false), Type.getType("(Ljava/lang/String;)Lio/airbyte/config/StreamSyncStats;")});
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/stream/Stream", "map", "(Ljava/util/function/Function;)Ljava/util/stream/Stream;", true);
Label label76 = new Label();
methodVisitor.visitLabel(label76);
methodVisitor.visitLineNumber(238, label76);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/stream/Collectors", "toList", "()Ljava/util/stream/Collector;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/stream/Stream", "collect", "(Ljava/util/stream/Collector;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/List");
methodVisitor.visitVarInsn(ASTORE, 12);
Label label77 = new Label();
methodVisitor.visitLabel(label77);
methodVisitor.visitLineNumber(240, label77);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/config/ReplicationAttemptSummary");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/config/ReplicationAttemptSummary", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 10);
Label label78 = new Label();
methodVisitor.visitLabel(label78);
methodVisitor.visitLineNumber(241, label78);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withStatus", "(Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label79 = new Label();
methodVisitor.visitLabel(label79);
methodVisitor.visitLineNumber(242, label79);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalRecordsEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withRecordsSynced", "(Ljava/lang/Long;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label80 = new Label();
methodVisitor.visitLabel(label80);
methodVisitor.visitLineNumber(243, label80);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalBytesEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withBytesSynced", "(Ljava/lang/Long;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(ALOAD, 11);
Label label81 = new Label();
methodVisitor.visitLabel(label81);
methodVisitor.visitLineNumber(244, label81);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withTotalStats", "(Lio/airbyte/config/SyncStats;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(ALOAD, 12);
Label label82 = new Label();
methodVisitor.visitLabel(label82);
methodVisitor.visitLineNumber(245, label82);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withStreamStats", "(Ljava/util/List;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(LLOAD, 4);
Label label83 = new Label();
methodVisitor.visitLabel(label83);
methodVisitor.visitLineNumber(246, label83);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withStartTime", "(Ljava/lang/Long;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
Label label84 = new Label();
methodVisitor.visitLabel(label84);
methodVisitor.visitLineNumber(247, label84);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationAttemptSummary", "withEndTime", "(Ljava/lang/Long;)Lio/airbyte/config/ReplicationAttemptSummary;", false);
methodVisitor.visitVarInsn(ASTORE, 13);
Label label85 = new Label();
methodVisitor.visitLabel(label85);
methodVisitor.visitLineNumber(249, label85);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("sync summary: {}");
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
Label label86 = new Label();
methodVisitor.visitLabel(label86);
methodVisitor.visitLineNumber(250, label86);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/config/ReplicationOutput");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/config/ReplicationOutput", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 13);
Label label87 = new Label();
methodVisitor.visitLabel(label87);
methodVisitor.visitLineNumber(251, label87);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationOutput", "withReplicationAttemptSummary", "(Lio/airbyte/config/ReplicationAttemptSummary;)Lio/airbyte/config/ReplicationOutput;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label88 = new Label();
methodVisitor.visitLabel(label88);
methodVisitor.visitLineNumber(252, label88);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/WorkerDestinationConfig", "getCatalog", "()Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationOutput", "withOutputCatalog", "(Lio/airbyte/protocol/models/ConfiguredAirbyteCatalog;)Lio/airbyte/config/ReplicationOutput;", false);
methodVisitor.visitVarInsn(ASTORE, 14);
Label label89 = new Label();
methodVisitor.visitLabel(label89);
methodVisitor.visitLineNumber(255, label89);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/config/FailureReason");
methodVisitor.visitVarInsn(ASTORE, 15);
Label label90 = new Label();
methodVisitor.visitLabel(label90);
methodVisitor.visitLineNumber(256, label90);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/config/FailureReason");
methodVisitor.visitVarInsn(ASTORE, 16);
Label label91 = new Label();
methodVisitor.visitLabel(label91);
methodVisitor.visitLineNumber(257, label91);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "errorTraceMessageFailure", "(Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", true);
methodVisitor.visitVarInsn(ASTORE, 17);
Label label92 = new Label();
methodVisitor.visitLabel(label92);
methodVisitor.visitLineNumber(259, label92);
methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 18);
Label label93 = new Label();
methodVisitor.visitLabel(label93);
methodVisitor.visitLineNumber(261, label93);
methodVisitor.visitVarInsn(ALOAD, 17);
Label label94 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label94);
Label label95 = new Label();
methodVisitor.visitLabel(label95);
methodVisitor.visitLineNumber(262, label95);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitVarInsn(ALOAD, 17);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label94);
methodVisitor.visitLineNumber(265, label94);
methodVisitor.visitFrame(Opcodes.F_FULL, 18, new Object[] {"io/airbyte/workers/general/DefaultReplicationWorker", "io/airbyte/config/StandardSyncInput", "java/nio/file/Path", "io/airbyte/config/WorkerDestinationConfig", Opcodes.LONG, "java/util/concurrent/atomic/AtomicReference", "java/util/concurrent/atomic/AtomicReference", "io/airbyte/config/WorkerSourceConfig", "java/util/Map", "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "io/airbyte/config/SyncStats", "java/util/List", "io/airbyte/config/ReplicationAttemptSummary", "io/airbyte/config/ReplicationOutput", "io/airbyte/config/FailureReason", "io/airbyte/config/FailureReason", "io/airbyte/config/FailureReason", "java/util/List"}, 0, new Object[] {});
methodVisitor.visitVarInsn(ALOAD, 15);
Label label96 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label96);
Label label97 = new Label();
methodVisitor.visitLabel(label97);
methodVisitor.visitLineNumber(266, label97);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitVarInsn(ALOAD, 15);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label96);
methodVisitor.visitLineNumber(268, label96);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 16);
Label label98 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label98);
Label label99 = new Label();
methodVisitor.visitLabel(label99);
methodVisitor.visitLineNumber(269, label99);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitVarInsn(ALOAD, 16);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label98);
methodVisitor.visitLineNumber(271, label98);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "isEmpty", "()Z", true);
Label label100 = new Label();
methodVisitor.visitJumpInsn(IFNE, label100);
Label label101 = new Label();
methodVisitor.visitLabel(label101);
methodVisitor.visitLineNumber(272, label101);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitVarInsn(ALOAD, 18);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationOutput", "setFailures", "(Ljava/util/List;)V", false);
methodVisitor.visitLabel(label100);
methodVisitor.visitLineNumber(275, label100);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getSourceOutputState", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label102 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label102);
Label label103 = new Label();
methodVisitor.visitLabel(label103);
methodVisitor.visitLineNumber(276, label103);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Source output at least one state message");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
Label label104 = new Label();
methodVisitor.visitJumpInsn(GOTO, label104);
methodVisitor.visitLabel(label102);
methodVisitor.visitLineNumber(278, label102);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Source did not output any state messages");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label104);
methodVisitor.visitLineNumber(281, label104);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getDestinationOutputState", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label105 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label105);
Label label106 = new Label();
methodVisitor.visitLabel(label106);
methodVisitor.visitLineNumber(282, label106);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("State capture: Updated state to: {}");
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getDestinationOutputState", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
Label label107 = new Label();
methodVisitor.visitLabel(label107);
methodVisitor.visitLineNumber(283, label107);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getDestinationOutputState", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/config/State");
methodVisitor.visitVarInsn(ASTORE, 19);
Label label108 = new Label();
methodVisitor.visitLabel(label108);
methodVisitor.visitLineNumber(284, label108);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitVarInsn(ALOAD, 19);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationOutput", "withState", "(Lio/airbyte/config/State;)Lio/airbyte/config/ReplicationOutput;", false);
methodVisitor.visitInsn(POP);
Label label109 = new Label();
methodVisitor.visitLabel(label109);
methodVisitor.visitLineNumber(285, label109);
Label label110 = new Label();
methodVisitor.visitJumpInsn(GOTO, label110);
methodVisitor.visitLabel(label105);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StandardSyncInput", "getState", "()Lio/airbyte/config/State;", false);
Label label111 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label111);
Label label112 = new Label();
methodVisitor.visitLabel(label112);
methodVisitor.visitLineNumber(286, label112);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("State capture: No new state, falling back on input state: {}");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StandardSyncInput", "getState", "()Lio/airbyte/config/State;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
Label label113 = new Label();
methodVisitor.visitLabel(label113);
methodVisitor.visitLineNumber(287, label113);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StandardSyncInput", "getState", "()Lio/airbyte/config/State;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/ReplicationOutput", "withState", "(Lio/airbyte/config/State;)Lio/airbyte/config/ReplicationOutput;", false);
methodVisitor.visitInsn(POP);
methodVisitor.visitJumpInsn(GOTO, label110);
methodVisitor.visitLabel(label111);
methodVisitor.visitLineNumber(289, label111);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("State capture: No state retained.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "warn", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label110);
methodVisitor.visitLineNumber(292, label110);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getUnreliableStateTimingMetrics", "()Ljava/lang/Boolean;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
Label label114 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label114);
Label label115 = new Label();
methodVisitor.visitLabel(label115);
methodVisitor.visitLineNumber(293, label115);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/workers/WorkerMetricReporter", "trackStateMetricTrackerError", "()V", false);
methodVisitor.visitLabel(label114);
methodVisitor.visitLineNumber(296, label114);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 14);
methodVisitor.visitLabel(label19);
methodVisitor.visitInsn(ARETURN);
methodVisitor.visitLabel(label20);
methodVisitor.visitLineNumber(297, label20);
methodVisitor.visitFrame(Opcodes.F_FULL, 7, new Object[] {"io/airbyte/workers/general/DefaultReplicationWorker", "io/airbyte/config/StandardSyncInput", "java/nio/file/Path", "io/airbyte/config/WorkerDestinationConfig", Opcodes.LONG, "java/util/concurrent/atomic/AtomicReference", "java/util/concurrent/atomic/AtomicReference"}, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 8);
Label label116 = new Label();
methodVisitor.visitLabel(label116);
methodVisitor.visitLineNumber(298, label116);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/exception/WorkerException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Sync failed");
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/exception/WorkerException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
Label label117 = new Label();
methodVisitor.visitLabel(label117);
methodVisitor.visitLocalVariable("destinationOutputThreadFuture", "Ljava/util/concurrent/CompletableFuture;", "Ljava/util/concurrent/CompletableFuture<*>;", label37, label1, 12);
methodVisitor.visitLocalVariable("replicationThreadFuture", "Ljava/util/concurrent/CompletableFuture;", "Ljava/util/concurrent/CompletableFuture<*>;", label41, label1, 13);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label50, label16, 10);
methodVisitor.visitLocalVariable("outputStatus", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;", null, label56, label54, 10);
methodVisitor.visitLocalVariable("outputStatus", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;", null, label60, label58, 10);
methodVisitor.visitLocalVariable("state", "Lio/airbyte/config/State;", null, label108, label109, 19);
methodVisitor.visitLocalVariable("sourceConfig", "Lio/airbyte/config/WorkerSourceConfig;", null, label31, label20, 8);
methodVisitor.visitLocalVariable("mdc", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", label12, label20, 9);
methodVisitor.visitLocalVariable("outputStatus", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;", null, label57, label20, 10);
methodVisitor.visitLocalVariable("totalSyncStats", "Lio/airbyte/config/SyncStats;", null, label69, label20, 11);
methodVisitor.visitLocalVariable("streamSyncStats", "Ljava/util/List;", "Ljava/util/List<Lio/airbyte/config/StreamSyncStats;>;", label77, label20, 12);
methodVisitor.visitLocalVariable("summary", "Lio/airbyte/config/ReplicationAttemptSummary;", null, label85, label20, 13);
methodVisitor.visitLocalVariable("output", "Lio/airbyte/config/ReplicationOutput;", null, label89, label20, 14);
methodVisitor.visitLocalVariable("sourceFailure", "Lio/airbyte/config/FailureReason;", null, label90, label20, 15);
methodVisitor.visitLocalVariable("destinationFailure", "Lio/airbyte/config/FailureReason;", null, label91, label20, 16);
methodVisitor.visitLocalVariable("traceMessageFailure", "Lio/airbyte/config/FailureReason;", null, label92, label20, 17);
methodVisitor.visitLocalVariable("failures", "Ljava/util/List;", "Ljava/util/List<Lio/airbyte/config/FailureReason;>;", label93, label20, 18);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label116, label117, 8);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label21, label117, 0);
methodVisitor.visitLocalVariable("syncInput", "Lio/airbyte/config/StandardSyncInput;", null, label21, label117, 1);
methodVisitor.visitLocalVariable("jobRoot", "Ljava/nio/file/Path;", null, label21, label117, 2);
methodVisitor.visitLocalVariable("destinationConfig", "Lio/airbyte/config/WorkerDestinationConfig;", null, label23, label117, 3);
methodVisitor.visitLocalVariable("startTime", "J", null, label25, label117, 4);
methodVisitor.visitLocalVariable("replicationRunnableFailureRef", "Ljava/util/concurrent/atomic/AtomicReference;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/airbyte/config/FailureReason;>;", label26, label117, 6);
methodVisitor.visitLocalVariable("destinationRunnableFailureRef", "Ljava/util/concurrent/atomic/AtomicReference;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/airbyte/config/FailureReason;>;", label18, label117, 7);
methodVisitor.visitMaxs(8, 20);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "getReplicationRunnable", "(Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/WorkerMetricReporter;)Ljava/lang/Runnable;", "(Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/WorkerMetricReporter;)Ljava/lang/Runnable;", null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(311, label0);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInvokeDynamicInsn("run", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/WorkerMetricReporter;)Ljava/lang/Runnable;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()V"), new Handle(Opcodes.H_INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$getReplicationRunnable$6", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/WorkerMetricReporter;)V", false), Type.getType("()V")});
methodVisitor.visitInsn(ARETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("source", "Lio/airbyte/workers/internal/AirbyteSource;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, label0, label1, 1);
methodVisitor.visitLocalVariable("cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, label0, label1, 2);
methodVisitor.visitLocalVariable("mapper", "Lio/airbyte/workers/internal/AirbyteMapper;", null, label0, label1, 3);
methodVisitor.visitLocalVariable("messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, label0, label1, 4);
methodVisitor.visitLocalVariable("mdc", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", label0, label1, 5);
methodVisitor.visitLocalVariable("recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;", null, label0, label1, 6);
methodVisitor.visitLocalVariable("metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;", null, label0, label1, 7);
methodVisitor.visitMaxs(8, 8);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "validateSchema", "(Lio/airbyte/workers/RecordSchemaValidator;Ljava/util/Map;Lio/airbyte/protocol/models/AirbyteMessage;)V", "(Lio/airbyte/workers/RecordSchemaValidator;Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair<Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/Integer;>;>;Lio/airbyte/protocol/models/AirbyteMessage;)V", null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "io/airbyte/workers/exception/RecordSchemaValidationException");
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(388, label3);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteMessage", "getRecord", "()Lio/airbyte/protocol/models/AirbyteRecordMessage;", false);
Label label4 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label4);
Label label5 = new Label();
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(389, label5);
methodVisitor.visitInsn(RETURN);
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(392, label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteMessage", "getRecord", "()Lio/airbyte/protocol/models/AirbyteRecordMessage;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(393, label6);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteRecordMessage", "getNamespace", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteRecordMessage", "getStream", "()Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/WorkerUtils", "streamNameWithNamespace", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ASTORE, 4);
Label label7 = new Label();
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(395, label7);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
Label label8 = new Label();
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(396, label8);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label9);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/commons/lang3/tuple/ImmutablePair");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/lang3/tuple/ImmutablePair", "getRight", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
methodVisitor.visitIntInsn(BIPUSH, 10);
Label label10 = new Label();
methodVisitor.visitJumpInsn(IF_ICMPGE, label10);
methodVisitor.visitLabel(label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"io/airbyte/protocol/models/AirbyteRecordMessage", "java/lang/String"}, 0, null);
methodVisitor.visitInsn(ICONST_1);
Label label11 = new Label();
methodVisitor.visitJumpInsn(GOTO, label11);
methodVisitor.visitLabel(label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitLabel(label11);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
methodVisitor.visitVarInsn(ISTORE, 5);
Label label12 = new Label();
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(397, label12);
methodVisitor.visitVarInsn(ILOAD, 5);
Label label13 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label13);
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(399, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/workers/RecordSchemaValidator", "validateSchema", "(Lio/airbyte/protocol/models/AirbyteRecordMessage;Ljava/lang/String;)V", false);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(410, label1);
methodVisitor.visitJumpInsn(GOTO, label13);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(400, label2);
methodVisitor.visitFrame(Opcodes.F_FULL, 6, new Object[] {"io/airbyte/workers/RecordSchemaValidator", "java/util/Map", "io/airbyte/protocol/models/AirbyteMessage", "io/airbyte/protocol/models/AirbyteRecordMessage", "java/lang/String", Opcodes.INTEGER}, 1, new Object[] {"io/airbyte/workers/exception/RecordSchemaValidationException"});
methodVisitor.visitVarInsn(ASTORE, 6);
Label label14 = new Label();
methodVisitor.visitLabel(label14);
methodVisitor.visitLineNumber(401, label14);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "org/apache/commons/lang3/tuple/ImmutablePair");
methodVisitor.visitVarInsn(ASTORE, 7);
Label label15 = new Label();
methodVisitor.visitLabel(label15);
methodVisitor.visitLineNumber(402, label15);
methodVisitor.visitVarInsn(ALOAD, 7);
Label label16 = new Label();
methodVisitor.visitJumpInsn(IFNONNULL, label16);
Label label17 = new Label();
methodVisitor.visitLabel(label17);
methodVisitor.visitLineNumber(403, label17);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(NEW, "org/apache/commons/lang3/tuple/ImmutablePair");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/exception/RecordSchemaValidationException", "errorMessages", "Ljava/util/Set;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/commons/lang3/tuple/ImmutablePair", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitJumpInsn(GOTO, label13);
methodVisitor.visitLabel(label16);
methodVisitor.visitLineNumber(405, label16);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"io/airbyte/workers/exception/RecordSchemaValidationException", "org/apache/commons/lang3/tuple/ImmutablePair"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/lang3/tuple/ImmutablePair", "getRight", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
methodVisitor.visitVarInsn(ASTORE, 8);
Label label18 = new Label();
methodVisitor.visitLabel(label18);
methodVisitor.visitLineNumber(406, label18);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/lang3/tuple/ImmutablePair", "getLeft", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Set");
methodVisitor.visitVarInsn(ASTORE, 9);
Label label19 = new Label();
methodVisitor.visitLabel(label19);
methodVisitor.visitLineNumber(407, label19);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "stream", "()Ljava/util/stream/Stream;", true);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/exception/RecordSchemaValidationException", "errorMessages", "Ljava/util/Set;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "stream", "()Ljava/util/stream/Stream;", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/stream/Stream", "concat", "(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/stream/Collectors", "toSet", "()Ljava/util/stream/Collector;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/stream/Stream", "collect", "(Ljava/util/stream/Collector;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Set");
methodVisitor.visitVarInsn(ASTORE, 10);
Label label20 = new Label();
methodVisitor.visitLabel(label20);
methodVisitor.visitLineNumber(408, label20);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(NEW, "org/apache/commons/lang3/tuple/ImmutablePair");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitVarInsn(ALOAD, 8);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitInsn(IADD);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "org/apache/commons/lang3/tuple/ImmutablePair", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(413, label13);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label21 = new Label();
methodVisitor.visitLabel(label21);
methodVisitor.visitLocalVariable("currentCount", "Ljava/lang/Integer;", null, label18, label13, 8);
methodVisitor.visitLocalVariable("currentErrorMessages", "Ljava/util/Set;", "Ljava/util/Set<Ljava/lang/String;>;", label19, label13, 9);
methodVisitor.visitLocalVariable("updatedErrorMessages", "Ljava/util/Set;", "Ljava/util/Set<Ljava/lang/String;>;", label20, label13, 10);
methodVisitor.visitLocalVariable("exceptionWithCount", "Lorg/apache/commons/lang3/tuple/ImmutablePair;", "Lorg/apache/commons/lang3/tuple/ImmutablePair<Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/Integer;>;", label15, label13, 7);
methodVisitor.visitLocalVariable("e", "Lio/airbyte/workers/exception/RecordSchemaValidationException;", null, label14, label13, 6);
methodVisitor.visitLocalVariable("recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;", null, label3, label21, 0);
methodVisitor.visitLocalVariable("validationErrors", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair<Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/Integer;>;>;", label3, label21, 1);
methodVisitor.visitLocalVariable("message", "Lio/airbyte/protocol/models/AirbyteMessage;", null, label3, label21, 2);
methodVisitor.visitLocalVariable("record", "Lio/airbyte/protocol/models/AirbyteRecordMessage;", null, label6, label21, 3);
methodVisitor.visitLocalVariable("messageStream", "Ljava/lang/String;", null, label7, label21, 4);
methodVisitor.visitLocalVariable("streamHasLessThenTenErrs", "Z", null, label12, label21, 5);
methodVisitor.visitMaxs(7, 11);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC, "getDestinationOutputRunnable", "(Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map;)Ljava/lang/Runnable;", "(Lio/airbyte/workers/internal/AirbyteDestination;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/MessageTracker;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/Runnable;", null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(419, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitInvokeDynamicInsn("run", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/internal/MessageTracker;)Ljava/lang/Runnable;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("()V"), new Handle(Opcodes.H_INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$getDestinationOutputRunnable$7", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/internal/MessageTracker;)V", false), Type.getType("()V")});
methodVisitor.visitInsn(ARETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, label0, label1, 0);
methodVisitor.visitLocalVariable("cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, label0, label1, 1);
methodVisitor.visitLocalVariable("messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, label0, label1, 2);
methodVisitor.visitLocalVariable("mdc", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", label0, label1, 3);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "cancel", "()V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/InterruptedException");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Exception");
Label label6 = new Label();
Label label7 = new Label();
Label label8 = new Label();
methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/Exception");
Label label9 = new Label();
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(459, label9);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Cancelling replication worker...");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(461, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "executors", "Ljava/util/concurrent/ExecutorService;");
methodVisitor.visitLdcInsn(new Long(10L));
methodVisitor.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/ExecutorService", "awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", true);
methodVisitor.visitInsn(POP);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(464, label1);
Label label10 = new Label();
methodVisitor.visitJumpInsn(GOTO, label10);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(462, label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/InterruptedException"});
methodVisitor.visitVarInsn(ASTORE, 1);
Label label11 = new Label();
methodVisitor.visitLabel(label11);
methodVisitor.visitLineNumber(463, label11);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/InterruptedException", "printStackTrace", "()V", false);
methodVisitor.visitLabel(label10);
methodVisitor.visitLineNumber(465, label10);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;");
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "set", "(Z)V", false);
Label label12 = new Label();
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(467, label12);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Cancelling destination...");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(469, label3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "destination", "Lio/airbyte/workers/internal/AirbyteDestination;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "cancel", "()V", true);
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(472, label4);
Label label13 = new Label();
methodVisitor.visitJumpInsn(GOTO, label13);
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(470, label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 1);
Label label14 = new Label();
methodVisitor.visitLabel(label14);
methodVisitor.visitLineNumber(471, label14);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Error cancelling destination: ");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(474, label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Cancelling source...");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(476, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "source", "Lio/airbyte/workers/internal/AirbyteSource;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "cancel", "()V", true);
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(479, label7);
Label label15 = new Label();
methodVisitor.visitJumpInsn(GOTO, label15);
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(477, label8);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 1);
Label label16 = new Label();
methodVisitor.visitLabel(label16);
methodVisitor.visitLineNumber(478, label16);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Error cancelling source: ");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
methodVisitor.visitLabel(label15);
methodVisitor.visitLineNumber(481, label15);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label17 = new Label();
methodVisitor.visitLabel(label17);
methodVisitor.visitLocalVariable("e", "Ljava/lang/InterruptedException;", null, label11, label10, 1);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label14, label13, 1);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label16, label15, 1);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label9, label17, 0);
methodVisitor.visitMaxs(4, 2);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, "run", "(Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;", null, new String[] { "io/airbyte/workers/exception/WorkerException" });
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(65, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/config/StandardSyncInput");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/workers/general/DefaultReplicationWorker", "run", "(Lio/airbyte/config/StandardSyncInput;Ljava/nio/file/Path;)Lio/airbyte/config/ReplicationOutput;", false);
methodVisitor.visitInsn(ARETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label0, label1, 0);
methodVisitor.visitMaxs(3, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$getDestinationOutputRunnable$7", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/internal/MessageTracker;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Exception");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Exception");
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(420, label6);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/slf4j/MDC", "setContextMap", "(Ljava/util/Map;)V", false);
Label label7 = new Label();
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(421, label7);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Destination output thread started.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(423, label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
Label label8 = new Label();
methodVisitor.visitJumpInsn(IFNE, label8);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "isFinished", "()Z", true);
methodVisitor.visitJumpInsn(IFNE, label8);
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(426, label0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "attemptRead", "()Ljava/util/Optional;", true);
methodVisitor.visitVarInsn(ASTORE, 4);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(429, label1);
Label label9 = new Label();
methodVisitor.visitJumpInsn(GOTO, label9);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(427, label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 5);
Label label10 = new Label();
methodVisitor.visitLabel(label10);
methodVisitor.visitLineNumber(428, label10);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Destination process read attempt failed");
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(430, label9);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Optional"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label11 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label11);
Label label12 = new Label();
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(431, label12);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("State in DefaultReplicationWorker from destination: {}");
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
Label label13 = new Label();
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(432, label13);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/protocol/models/AirbyteMessage");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "acceptFromDestination", "(Lio/airbyte/protocol/models/AirbyteMessage;)V", true);
methodVisitor.visitLabel(label11);
methodVisitor.visitLineNumber(434, label11);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label3);
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(435, label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
methodVisitor.visitJumpInsn(IFNE, label4);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "getExitValue", "()I", true);
methodVisitor.visitJumpInsn(IFEQ, label4);
Label label14 = new Label();
methodVisitor.visitLabel(label14);
methodVisitor.visitLineNumber(436, label14);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "getExitValue", "()I", true);
methodVisitor.visitInvokeDynamicInsn("makeConcatWithConstants", "(I)Ljava/lang/String;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/StringConcatFactory", "makeConcatWithConstants", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;", false), new Object[]{"Destination process exited with non-zero exit code \u0001"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(452, label4);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label label15 = new Label();
methodVisitor.visitJumpInsn(GOTO, label15);
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(438, label5);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 4);
Label label16 = new Label();
methodVisitor.visitLabel(label16);
methodVisitor.visitLineNumber(439, label16);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
methodVisitor.visitJumpInsn(IFNE, label15);
Label label17 = new Label();
methodVisitor.visitLabel(label17);
methodVisitor.visitLineNumber(445, label17);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
Label label18 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label18);
Label label19 = new Label();
methodVisitor.visitLabel(label19);
methodVisitor.visitLineNumber(447, label19);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label18);
methodVisitor.visitLineNumber(449, label18);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Exception"}, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/lang/RuntimeException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label15);
methodVisitor.visitLineNumber(453, label15);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label20 = new Label();
methodVisitor.visitLabel(label20);
methodVisitor.visitLocalVariable("messageOptional", "Ljava/util/Optional;", "Ljava/util/Optional<Lio/airbyte/protocol/models/AirbyteMessage;>;", label1, label2, 4);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label10, label9, 5);
methodVisitor.visitLocalVariable("messageOptional", "Ljava/util/Optional;", "Ljava/util/Optional<Lio/airbyte/protocol/models/AirbyteMessage;>;", label9, label11, 4);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label16, label15, 4);
methodVisitor.visitLocalVariable("mdc", "Ljava/util/Map;", null, label6, label20, 0);
methodVisitor.visitLocalVariable("cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, label6, label20, 1);
methodVisitor.visitLocalVariable("destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, label6, label20, 2);
methodVisitor.visitLocalVariable("messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, label6, label20, 3);
methodVisitor.visitMaxs(4, 6);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$getReplicationRunnable$6", "(Ljava/util/Map;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/airbyte/workers/internal/AirbyteSource;Lio/airbyte/workers/RecordSchemaValidator;Lio/airbyte/workers/internal/AirbyteMapper;Lio/airbyte/workers/internal/MessageTracker;Lio/airbyte/workers/internal/AirbyteDestination;Lio/airbyte/workers/WorkerMetricReporter;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
Label label1 = new Label();
Label label2 = new Label();
methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Exception");
Label label3 = new Label();
Label label4 = new Label();
Label label5 = new Label();
methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Exception");
Label label6 = new Label();
Label label7 = new Label();
Label label8 = new Label();
methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/lang/Exception");
Label label9 = new Label();
Label label10 = new Label();
Label label11 = new Label();
methodVisitor.visitTryCatchBlock(label9, label10, label11, "java/lang/Exception");
Label label12 = new Label();
Label label13 = new Label();
Label label14 = new Label();
methodVisitor.visitTryCatchBlock(label12, label13, label14, "java/lang/Exception");
Label label15 = new Label();
methodVisitor.visitLabel(label15);
methodVisitor.visitLineNumber(312, label15);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/slf4j/MDC", "setContextMap", "(Ljava/util/Map;)V", false);
Label label16 = new Label();
methodVisitor.visitLabel(label16);
methodVisitor.visitLineNumber(313, label16);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Replication thread started.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
Label label17 = new Label();
methodVisitor.visitLabel(label17);
methodVisitor.visitLineNumber(314, label17);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ISTORE, 8);
Label label18 = new Label();
methodVisitor.visitLabel(label18);
methodVisitor.visitLineNumber(315, label18);
methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
methodVisitor.visitVarInsn(ASTORE, 9);
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(317, label12);
methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "java/util/Map"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
Label label19 = new Label();
methodVisitor.visitJumpInsn(IFNE, label19);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "isFinished", "()Z", true);
methodVisitor.visitJumpInsn(IFNE, label19);
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(320, label0);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "attemptRead", "()Ljava/util/Optional;", true);
methodVisitor.visitVarInsn(ASTORE, 10);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(323, label1);
Label label20 = new Label();
methodVisitor.visitJumpInsn(GOTO, label20);
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(321, label2);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 11);
Label label21 = new Label();
methodVisitor.visitLabel(label21);
methodVisitor.visitLineNumber(322, label21);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Source process read attempt failed");
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label20);
methodVisitor.visitLineNumber(325, label20);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Optional"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label22 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label22);
Label label23 = new Label();
methodVisitor.visitLabel(label23);
methodVisitor.visitLineNumber(326, label23);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "io/airbyte/protocol/models/AirbyteMessage");
methodVisitor.visitVarInsn(ASTORE, 11);
Label label24 = new Label();
methodVisitor.visitLabel(label24);
methodVisitor.visitLineNumber(327, label24);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "validateSchema", "(Lio/airbyte/workers/RecordSchemaValidator;Ljava/util/Map;Lio/airbyte/protocol/models/AirbyteMessage;)V", false);
Label label25 = new Label();
methodVisitor.visitLabel(label25);
methodVisitor.visitLineNumber(328, label25);
methodVisitor.visitVarInsn(ALOAD, 4);
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteMapper", "mapMessage", "(Lio/airbyte/protocol/models/AirbyteMessage;)Lio/airbyte/protocol/models/AirbyteMessage;", true);
methodVisitor.visitVarInsn(ASTORE, 12);
Label label26 = new Label();
methodVisitor.visitLabel(label26);
methodVisitor.visitLineNumber(330, label26);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "acceptFromSource", "(Lio/airbyte/protocol/models/AirbyteMessage;)V", true);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(332, label3);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitVarInsn(ALOAD, 12);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "accept", "(Lio/airbyte/protocol/models/AirbyteMessage;)V", true);
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(335, label4);
Label label27 = new Label();
methodVisitor.visitJumpInsn(GOTO, label27);
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(333, label5);
methodVisitor.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/util/Map", "java/util/concurrent/atomic/AtomicBoolean", "io/airbyte/workers/internal/AirbyteSource", "io/airbyte/workers/RecordSchemaValidator", "io/airbyte/workers/internal/AirbyteMapper", "io/airbyte/workers/internal/MessageTracker", "io/airbyte/workers/internal/AirbyteDestination", "io/airbyte/workers/WorkerMetricReporter", Opcodes.INTEGER, "java/util/Map", "java/util/Optional", "io/airbyte/protocol/models/AirbyteMessage", "io/airbyte/protocol/models/AirbyteMessage"}, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 13);
Label label28 = new Label();
methodVisitor.visitLabel(label28);
methodVisitor.visitLineNumber(334, label28);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Destination process message delivery failed");
methodVisitor.visitVarInsn(ALOAD, 13);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label27);
methodVisitor.visitLineNumber(336, label27);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitIincInsn(8, 1);
Label label29 = new Label();
methodVisitor.visitLabel(label29);
methodVisitor.visitLineNumber(338, label29);
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitIntInsn(SIPUSH, 1000);
methodVisitor.visitInsn(IREM);
Label label30 = new Label();
methodVisitor.visitJumpInsn(IFNE, label30);
Label label31 = new Label();
methodVisitor.visitLabel(label31);
methodVisitor.visitLineNumber(339, label31);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Records read: {} ({})");
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalBytesEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/commons/io/FileUtils", "byteCountToDisplaySize", "(J)Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
methodVisitor.visitLabel(label30);
methodVisitor.visitLineNumber(341, label30);
methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
Label label32 = new Label();
methodVisitor.visitJumpInsn(GOTO, label32);
methodVisitor.visitLabel(label22);
methodVisitor.visitLineNumber(342, label22);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Source has no more messages, closing connection.");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;)V", true);
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(344, label6);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "close", "()V", true);
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(347, label7);
methodVisitor.visitJumpInsn(GOTO, label32);
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(345, label8);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 11);
Label label33 = new Label();
methodVisitor.visitLabel(label33);
methodVisitor.visitLineNumber(346, label33);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Source cannot be stopped!");
methodVisitor.visitVarInsn(ALOAD, 11);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label32);
methodVisitor.visitLineNumber(349, label32);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitJumpInsn(GOTO, label12);
methodVisitor.visitLabel(label19);
methodVisitor.visitLineNumber(350, label19);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Total records read: {} ({})");
methodVisitor.visitVarInsn(ILOAD, 8);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitVarInsn(ALOAD, 5);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getTotalBytesEmitted", "()J", true);
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/apache/commons/io/FileUtils", "byteCountToDisplaySize", "(J)Ljava/lang/String;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "info", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label label34 = new Label();
methodVisitor.visitLabel(label34);
methodVisitor.visitLineNumber(351, label34);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "isEmpty", "()Z", true);
methodVisitor.visitJumpInsn(IFNE, label9);
Label label35 = new Label();
methodVisitor.visitLabel(label35);
methodVisitor.visitLineNumber(352, label35);
methodVisitor.visitVarInsn(ALOAD, 9);
methodVisitor.visitVarInsn(ALOAD, 7);
methodVisitor.visitInvokeDynamicInsn("accept", "(Lio/airbyte/workers/WorkerMetricReporter;)Ljava/util/function/BiConsumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false), new Object[]{Type.getType("(Ljava/lang/Object;Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKESTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "lambda$getReplicationRunnable$5", "(Lio/airbyte/workers/WorkerMetricReporter;Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair;)V", false), Type.getType("(Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair;)V")});
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "forEach", "(Ljava/util/function/BiConsumer;)V", true);
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(359, label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 6);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteDestination", "notifyEndOfInput", "()V", true);
methodVisitor.visitLabel(label10);
methodVisitor.visitLineNumber(362, label10);
Label label36 = new Label();
methodVisitor.visitJumpInsn(GOTO, label36);
methodVisitor.visitLabel(label11);
methodVisitor.visitLineNumber(360, label11);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 10);
Label label37 = new Label();
methodVisitor.visitLabel(label37);
methodVisitor.visitLineNumber(361, label37);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitLdcInsn("Destination process end of stream notification failed");
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException", "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label36);
methodVisitor.visitLineNumber(363, label36);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
methodVisitor.visitJumpInsn(IFNE, label13);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "getExitValue", "()I", true);
methodVisitor.visitJumpInsn(IFEQ, label13);
Label label38 = new Label();
methodVisitor.visitLabel(label38);
methodVisitor.visitLineNumber(364, label38);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/AirbyteSource", "getExitValue", "()I", true);
methodVisitor.visitInvokeDynamicInsn("makeConcatWithConstants", "(I)Ljava/lang/String;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/StringConcatFactory", "makeConcatWithConstants", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;", false), new Object[]{"Source process exited with non-zero exit code \u0001"});
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException", "<init>", "(Ljava/lang/String;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(381, label13);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label label39 = new Label();
methodVisitor.visitJumpInsn(GOTO, label39);
methodVisitor.visitLabel(label14);
methodVisitor.visitLineNumber(366, label14);
methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
methodVisitor.visitVarInsn(ASTORE, 10);
Label label40 = new Label();
methodVisitor.visitLabel(label40);
methodVisitor.visitLineNumber(367, label40);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicBoolean", "get", "()Z", false);
methodVisitor.visitJumpInsn(IFNE, label39);
Label label41 = new Label();
methodVisitor.visitLabel(label41);
methodVisitor.visitLineNumber(373, label41);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException");
Label label42 = new Label();
methodVisitor.visitJumpInsn(IFNE, label42);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
Label label43 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label43);
methodVisitor.visitLabel(label42);
methodVisitor.visitLineNumber(376, label42);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Exception"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label43);
methodVisitor.visitLineNumber(378, label43);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "java/lang/RuntimeException");
methodVisitor.visitInsn(DUP);
methodVisitor.visitVarInsn(ALOAD, 10);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/RuntimeException", "<init>", "(Ljava/lang/Throwable;)V", false);
methodVisitor.visitInsn(ATHROW);
methodVisitor.visitLabel(label39);
methodVisitor.visitLineNumber(382, label39);
methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label44 = new Label();
methodVisitor.visitLabel(label44);
methodVisitor.visitLocalVariable("messageOptional", "Ljava/util/Optional;", "Ljava/util/Optional<Lio/airbyte/protocol/models/AirbyteMessage;>;", label1, label2, 10);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label21, label20, 11);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label28, label27, 13);
methodVisitor.visitLocalVariable("airbyteMessage", "Lio/airbyte/protocol/models/AirbyteMessage;", null, label24, label30, 11);
methodVisitor.visitLocalVariable("message", "Lio/airbyte/protocol/models/AirbyteMessage;", null, label26, label30, 12);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label33, label32, 11);
methodVisitor.visitLocalVariable("messageOptional", "Ljava/util/Optional;", "Ljava/util/Optional<Lio/airbyte/protocol/models/AirbyteMessage;>;", label20, label32, 10);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label37, label36, 10);
methodVisitor.visitLocalVariable("e", "Ljava/lang/Exception;", null, label40, label39, 10);
methodVisitor.visitLocalVariable("mdc", "Ljava/util/Map;", null, label15, label44, 0);
methodVisitor.visitLocalVariable("cancelled", "Ljava/util/concurrent/atomic/AtomicBoolean;", null, label15, label44, 1);
methodVisitor.visitLocalVariable("source", "Lio/airbyte/workers/internal/AirbyteSource;", null, label15, label44, 2);
methodVisitor.visitLocalVariable("recordSchemaValidator", "Lio/airbyte/workers/RecordSchemaValidator;", null, label15, label44, 3);
methodVisitor.visitLocalVariable("mapper", "Lio/airbyte/workers/internal/AirbyteMapper;", null, label15, label44, 4);
methodVisitor.visitLocalVariable("messageTracker", "Lio/airbyte/workers/internal/MessageTracker;", null, label15, label44, 5);
methodVisitor.visitLocalVariable("destination", "Lio/airbyte/workers/internal/AirbyteDestination;", null, label15, label44, 6);
methodVisitor.visitLocalVariable("metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;", null, label15, label44, 7);
methodVisitor.visitLocalVariable("recordsRead", "I", null, label18, label44, 8);
methodVisitor.visitLocalVariable("validationErrors", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair<Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/Integer;>;>;", label12, label44, 9);
methodVisitor.visitMaxs(5, 14);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$getReplicationRunnable$5", "(Lio/airbyte/workers/WorkerMetricReporter;Ljava/lang/String;Lorg/apache/commons/lang3/tuple/ImmutablePair;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(353, label0);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitLdcInsn("Schema validation errors found for stream {}. Error messages: {}");
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "org/apache/commons/lang3/tuple/ImmutablePair", "getLeft", "()Ljava/lang/Object;", false);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "org/slf4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(354, label1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/workers/WorkerMetricReporter", "trackSchemaValidationError", "(Ljava/lang/String;)V", false);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(355, label2);
methodVisitor.visitInsn(RETURN);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLocalVariable("metricReporter", "Lio/airbyte/workers/WorkerMetricReporter;", null, label0, label3, 0);
methodVisitor.visitLocalVariable("stream", "Ljava/lang/String;", null, label0, label3, 1);
methodVisitor.visitLocalVariable("errorPair", "Lorg/apache/commons/lang3/tuple/ImmutablePair;", null, label0, label3, 2);
methodVisitor.visitMaxs(4, 3);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_SYNTHETIC, "lambda$run$4", "(Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;Ljava/lang/String;)Lio/airbyte/config/StreamSyncStats;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(222, label0);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/config/SyncStats");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/config/SyncStats", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(223, label1);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToEmittedRecords", "()Ljava/util/Map;", true);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withRecordsEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(224, label2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToEmittedBytes", "()Ljava/util/Map;", true);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withBytesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitInsn(ACONST_NULL);
Label label3 = new Label();
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(225, label3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withSourceStateMessagesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitInsn(ACONST_NULL);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(226, label4);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "withDestinationStateMessagesEmitted", "(Ljava/lang/Long;)Lio/airbyte/config/SyncStats;", false);
methodVisitor.visitVarInsn(ASTORE, 3);
Label label5 = new Label();
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(228, label5);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitFieldInsn(GETSTATIC, "io/airbyte/config/StandardSyncSummary$ReplicationStatus", "COMPLETED", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;");
Label label6 = new Label();
methodVisitor.visitJumpInsn(IF_ACMPNE, label6);
Label label7 = new Label();
methodVisitor.visitLabel(label7);
methodVisitor.visitLineNumber(229, label7);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToEmittedRecords", "()Ljava/util/Map;", true);
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
Label label8 = new Label();
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(230, label6);
methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"io/airbyte/config/SyncStats"}, 0, null);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToCommittedRecords", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "isPresent", "()Z", false);
Label label9 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label9);
Label label10 = new Label();
methodVisitor.visitLabel(label10);
methodVisitor.visitLineNumber(231, label10);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "messageTracker", "Lio/airbyte/workers/internal/MessageTracker;");
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "io/airbyte/workers/internal/MessageTracker", "getStreamToCommittedRecords", "()Ljava/util/Optional;", true);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Optional", "get", "()Ljava/lang/Object;", false);
methodVisitor.visitTypeInsn(CHECKCAST, "java/util/Map");
methodVisitor.visitVarInsn(ALOAD, 2);
methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Long");
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
methodVisitor.visitJumpInsn(GOTO, label8);
methodVisitor.visitLabel(label9);
methodVisitor.visitLineNumber(233, label9);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitInsn(ACONST_NULL);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/SyncStats", "setRecordsCommitted", "(Ljava/lang/Long;)V", false);
methodVisitor.visitLabel(label8);
methodVisitor.visitLineNumber(235, label8);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitTypeInsn(NEW, "io/airbyte/config/StreamSyncStats");
methodVisitor.visitInsn(DUP);
methodVisitor.visitMethodInsn(INVOKESPECIAL, "io/airbyte/config/StreamSyncStats", "<init>", "()V", false);
methodVisitor.visitVarInsn(ALOAD, 2);
Label label11 = new Label();
methodVisitor.visitLabel(label11);
methodVisitor.visitLineNumber(236, label11);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StreamSyncStats", "withStreamName", "(Ljava/lang/String;)Lio/airbyte/config/StreamSyncStats;", false);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label12 = new Label();
methodVisitor.visitLabel(label12);
methodVisitor.visitLineNumber(237, label12);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/config/StreamSyncStats", "withStats", "(Lio/airbyte/config/SyncStats;)Lio/airbyte/config/StreamSyncStats;", false);
Label label13 = new Label();
methodVisitor.visitLabel(label13);
methodVisitor.visitLineNumber(235, label13);
methodVisitor.visitInsn(ARETURN);
Label label14 = new Label();
methodVisitor.visitLabel(label14);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label0, label14, 0);
methodVisitor.visitLocalVariable("outputStatus", "Lio/airbyte/config/StandardSyncSummary$ReplicationStatus;", null, label0, label14, 1);
methodVisitor.visitLocalVariable("stream", "Ljava/lang/String;", null, label0, label14, 2);
methodVisitor.visitLocalVariable("syncStats", "Lio/airbyte/config/SyncStats;", null, label5, label14, 3);
methodVisitor.visitMaxs(3, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_SYNTHETIC, "lambda$run$3", "(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Void;Ljava/lang/Throwable;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(162, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(163, label2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$SourceException");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(164, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/helper/FailureHelper", "sourceFailure", "(Ljava/lang/Throwable;Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "set", "(Ljava/lang/Object;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(165, label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
Label label5 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label5);
Label label6 = new Label();
methodVisitor.visitLabel(label6);
methodVisitor.visitLineNumber(166, label6);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/helper/FailureHelper", "destinationFailure", "(Ljava/lang/Throwable;Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "set", "(Ljava/lang/Object;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label5);
methodVisitor.visitLineNumber(168, label5);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/helper/FailureHelper", "replicationFailure", "(Ljava/lang/Throwable;Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "set", "(Ljava/lang/Object;)V", false);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(171, label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label7 = new Label();
methodVisitor.visitLabel(label7);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label0, label7, 0);
methodVisitor.visitLocalVariable("replicationRunnableFailureRef", "Ljava/util/concurrent/atomic/AtomicReference;", null, label0, label7, 1);
methodVisitor.visitLocalVariable("msg", "Ljava/lang/Void;", null, label0, label7, 2);
methodVisitor.visitLocalVariable("ex", "Ljava/lang/Throwable;", null, label0, label7, 3);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_SYNTHETIC, "lambda$run$2", "(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Void;Ljava/lang/Throwable;)V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(150, label0);
methodVisitor.visitVarInsn(ALOAD, 3);
Label label1 = new Label();
methodVisitor.visitJumpInsn(IFNULL, label1);
Label label2 = new Label();
methodVisitor.visitLabel(label2);
methodVisitor.visitLineNumber(151, label2);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
methodVisitor.visitTypeInsn(INSTANCEOF, "io/airbyte/workers/general/DefaultReplicationWorker$DestinationException");
Label label3 = new Label();
methodVisitor.visitJumpInsn(IFEQ, label3);
Label label4 = new Label();
methodVisitor.visitLabel(label4);
methodVisitor.visitLineNumber(152, label4);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/helper/FailureHelper", "destinationFailure", "(Ljava/lang/Throwable;Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "set", "(Ljava/lang/Object;)V", false);
methodVisitor.visitJumpInsn(GOTO, label1);
methodVisitor.visitLabel(label3);
methodVisitor.visitLineNumber(154, label3);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitVarInsn(ALOAD, 1);
methodVisitor.visitVarInsn(ALOAD, 3);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "jobId", "Ljava/lang/String;");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitFieldInsn(GETFIELD, "io/airbyte/workers/general/DefaultReplicationWorker", "attempt", "I");
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
methodVisitor.visitMethodInsn(INVOKESTATIC, "io/airbyte/workers/helper/FailureHelper", "replicationFailure", "(Ljava/lang/Throwable;Ljava/lang/Long;Ljava/lang/Integer;)Lio/airbyte/config/FailureReason;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/atomic/AtomicReference", "set", "(Ljava/lang/Object;)V", false);
methodVisitor.visitLabel(label1);
methodVisitor.visitLineNumber(157, label1);
methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
methodVisitor.visitInsn(RETURN);
Label label5 = new Label();
methodVisitor.visitLabel(label5);
methodVisitor.visitLocalVariable("this", "Lio/airbyte/workers/general/DefaultReplicationWorker;", null, label0, label5, 0);
methodVisitor.visitLocalVariable("destinationRunnableFailureRef", "Ljava/util/concurrent/atomic/AtomicReference;", null, label0, label5, 1);
methodVisitor.visitLocalVariable("msg", "Ljava/lang/Void;", null, label0, label5, 2);
methodVisitor.visitLocalVariable("ex", "Ljava/lang/Throwable;", null, label0, label5, 3);
methodVisitor.visitMaxs(4, 4);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$run$1", "(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(134, label0);
methodVisitor.visitLdcInsn("%s - %s");
methodVisitor.visitInsn(ICONST_2);
methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/ConfiguredAirbyteStream", "getSyncMode", "()Lio/airbyte/protocol/models/SyncMode;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitInsn(DUP);
methodVisitor.visitInsn(ICONST_1);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/ConfiguredAirbyteStream", "getDestinationSyncMode", "()Lio/airbyte/protocol/models/DestinationSyncMode;", false);
methodVisitor.visitInsn(AASTORE);
methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
methodVisitor.visitInsn(ARETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("s", "Lio/airbyte/protocol/models/ConfiguredAirbyteStream;", null, label0, label1, 0);
methodVisitor.visitMaxs(5, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$run$0", "(Lio/airbyte/protocol/models/ConfiguredAirbyteStream;)Ljava/lang/String;", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(133, label0);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/ConfiguredAirbyteStream", "getStream", "()Lio/airbyte/protocol/models/AirbyteStream;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteStream", "getNamespace", "()Ljava/lang/String;", false);
methodVisitor.visitVarInsn(ALOAD, 0);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/ConfiguredAirbyteStream", "getStream", "()Lio/airbyte/protocol/models/AirbyteStream;", false);
methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "io/airbyte/protocol/models/AirbyteStream", "getName", "()Ljava/lang/String;", false);
methodVisitor.visitInvokeDynamicInsn("makeConcatWithConstants", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/StringConcatFactory", "makeConcatWithConstants", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;", false), new Object[]{"\u0001.\u0001"});
methodVisitor.visitInsn(ARETURN);
Label label1 = new Label();
methodVisitor.visitLabel(label1);
methodVisitor.visitLocalVariable("s", "Lio/airbyte/protocol/models/ConfiguredAirbyteStream;", null, label0, label1, 0);
methodVisitor.visitMaxs(2, 1);
methodVisitor.visitEnd();
}
{
methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
methodVisitor.visitCode();
Label label0 = new Label();
methodVisitor.visitLabel(label0);
methodVisitor.visitLineNumber(68, label0);
methodVisitor.visitLdcInsn(Type.getType("Lio/airbyte/workers/general/DefaultReplicationWorker;"));
methodVisitor.visitMethodInsn(INVOKESTATIC, "org/slf4j/LoggerFactory", "getLogger", "(Ljava/lang/Class;)Lorg/slf4j/Logger;", false);
methodVisitor.visitFieldInsn(PUTSTATIC, "io/airbyte/workers/general/DefaultReplicationWorker", "LOGGER", "Lorg/slf4j/Logger;");
methodVisitor.visitInsn(RETURN);
methodVisitor.visitMaxs(1, 0);
methodVisitor.visitEnd();
}
classWriter.visitEnd();

return classWriter.toByteArray();
}
}
